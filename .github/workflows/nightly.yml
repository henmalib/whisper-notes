name: Nightly

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

env:
  APP_NAME: whisper-notes

concurrency:
  group: nightly-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: pnpm
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Setup compiler wrappers
        run: |
          # Linux: use system gcc/g++
          cat > /tmp/zig-cc << 'EOF'
          #!/bin/bash
          exec gcc "$@"
          EOF
          cat > /tmp/zig-c++ << 'EOF'
          #!/bin/bash
          exec g++ "$@"
          EOF
          chmod +x /tmp/zig-cc /tmp/zig-c++

      - name: Install platform dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y \
            cmake ninja-build pkg-config \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libvulkan-dev glslc upx-ucl

      - name: Cache whisper static libs
        uses: actions/cache@v4
        with:
          path: |
            whisper.cpp/build_go/src/*.a
            whisper.cpp/build_go/ggml/src/*.a
          key: ${{ runner.os }}-linux-whisper-a-${{ hashFiles('whisper.cpp/**','whisper.cpp/bindings/go/**') }}

      - name: Build whisper.cpp bindings
        env:
          CC: /tmp/zig-cc
          CXX: /tmp/zig-c++
        run: |
          BUILD_DIR=whisper.cpp/build_go
          rm -rf "${BUILD_DIR}"
          
          # Build CMake command with common flags
          CMAKE_ARGS=(
            -S whisper.cpp
            -B "${BUILD_DIR}"
            -DCMAKE_BUILD_TYPE=Release
            -DBUILD_SHARED_LIBS=OFF
            -DWHISPER_BUILD_TESTS=OFF
            -DWHISPER_BUILD_EXAMPLES=OFF
            -DGGML_BUILD_TESTS=OFF
            -DGGML_BUILD_EXAMPLES=OFF
            -DGGML_VULKAN=ON
            -DCMAKE_C_COMPILER=/tmp/zig-cc
            -DCMAKE_CXX_COMPILER=/tmp/zig-c++
          )
          
          cmake "${CMAKE_ARGS[@]}"
          cmake --build "${BUILD_DIR}" --config Release
          
          # Ensure lib prefix for Go linker
          for dir in "${BUILD_DIR}/src" "${BUILD_DIR}/ggml/src"; do
            for lib in whisper ggml ggml-base ggml-cpu; do
              [ -f "$dir/${lib}.a" ] && cp "$dir/${lib}.a" "$dir/lib${lib}.a" || true
            done
          done

      - name: Build app
        env:
          GOOS: linux
          GOARCH: amd64
          CGO_ENABLED: 1
        run: |
          ROOT="$(pwd)"
          
          # Use the wrapper scripts
          export CC=/tmp/zig-cc
          export CXX=/tmp/zig-c++
          
          # Linux system gcc - dynamically build library paths and flags
          export CGO_CFLAGS="-I$ROOT/whisper.cpp/include -I$ROOT/whisper.cpp/ggml/include"
          
          # Build -L flags for all directories containing .a files
          LDFLAGS="-L$ROOT/whisper.cpp/build_go/src -L$ROOT/whisper.cpp/build_go/ggml/src"
          for backend_dir in "$ROOT/whisper.cpp/build_go/ggml/src"/ggml-*/; do
            [ -d "$backend_dir" ] && LDFLAGS="$LDFLAGS -L$backend_dir"
          done
          
          # Build -l flags for all .a libraries found
          LIBS=""
          for afile in "$ROOT/whisper.cpp/build_go/src"/*.a "$ROOT/whisper.cpp/build_go/ggml/src"/*.a "$ROOT/whisper.cpp/build_go/ggml/src"/ggml-*/*.a; do
            [ -f "$afile" ] && LIBS="$LIBS -l$(basename "$afile" .a | sed 's/^lib//')"
          done
          
          export CGO_LDFLAGS="$LDFLAGS $LIBS -lvulkan -lstdc++"
          
          chmod +x ./build.sh
          ./build.sh -platform "linux/amd64" -o "${APP_NAME}-linux-amd64" -tags webkit2_41

      - name: Upload Linux binary
        uses: actions/upload-artifact@v4
        with:
          name: linux-bin
          path: build/bin/${{ env.APP_NAME }}-linux-amd64
      
      - name: Upload Wails bindings
        uses: actions/upload-artifact@v4
        with:
          name: wailsjs-bindings
          path: frontend/wailsjs/

  build-windows:
    runs-on: ubuntu-latest
    needs: build-linux
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: pnpm
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Download Wails bindings from Linux build
        uses: actions/download-artifact@v4
        with:
          name: wailsjs-bindings
          path: frontend/wailsjs/

      - name: Setup compiler wrappers
        run: |
          # Windows: use system mingw-w64 for cross-compilation
          cat > /tmp/zig-cc << 'EOF'
          #!/bin/bash
          exec x86_64-w64-mingw32-gcc "$@"
          EOF
          cat > /tmp/zig-c++ << 'EOF'
          #!/bin/bash
          exec x86_64-w64-mingw32-g++ "$@"
          EOF
          chmod +x /tmp/zig-cc /tmp/zig-c++

      - name: Install platform dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build pkg-config upx-ucl \
                      mingw-w64 gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64
          #
          # Switch to posix threading model for C++11 std::mutex support
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix

      - name: Cache whisper static libs
        uses: actions/cache@v4
        with:
          path: |
            whisper.cpp/build_go/src/*.a
            whisper.cpp/build_go/ggml/src/*.a
          key: ${{ runner.os }}-windows-whisper-a-${{ hashFiles('whisper.cpp/**','whisper.cpp/bindings/go/**') }}

      - name: Build whisper.cpp bindings
        env:
          CC: /tmp/zig-cc
          CXX: /tmp/zig-c++
        run: |
          BUILD_DIR=whisper.cpp/build_go
          rm -rf "${BUILD_DIR}"
          
          # Build CMake command with common flags
          CMAKE_ARGS=(
            -S whisper.cpp
            -B "${BUILD_DIR}"
            -DCMAKE_BUILD_TYPE=Release
            -DBUILD_SHARED_LIBS=OFF
            -DWHISPER_BUILD_TESTS=OFF
            -DWHISPER_BUILD_EXAMPLES=OFF
            -DGGML_BUILD_TESTS=OFF
            -DGGML_BUILD_EXAMPLES=OFF
            -DCMAKE_C_COMPILER=/tmp/zig-cc
            -DCMAKE_CXX_COMPILER=/tmp/zig-c++
            -DCMAKE_SYSTEM_NAME=Windows
          )
          
          # Target Windows 7 to avoid power throttling APIs not in mingw-w64 headers
          # mingw-w64-posix provides C++11 threading support
          WIN_FLAGS="-D_WIN32_WINNT=0x0601"
          CMAKE_ARGS+=(-DCMAKE_C_FLAGS="$WIN_FLAGS")
          CMAKE_ARGS+=(-DCMAKE_CXX_FLAGS="$WIN_FLAGS -std=c++11")
          
          cmake "${CMAKE_ARGS[@]}"
          cmake --build "${BUILD_DIR}" --config Release
          
          # Ensure lib prefix for Go linker - dynamically find all .a files
          for dir in "${BUILD_DIR}/src" "${BUILD_DIR}/ggml/src" "${BUILD_DIR}/ggml/src"/ggml-*/; do
            [ ! -d "$dir" ] && continue
            for afile in "$dir"/*.a; do
              [ ! -f "$afile" ] && continue
              basename=$(basename "$afile")
              # Add lib prefix if not already present
              if [[ ! "$basename" =~ ^lib ]]; then
                cp "$afile" "$dir/lib${basename}"
              fi
            done
          done

      - name: Build app
        env:
          GOOS: windows
          GOARCH: amd64
          CGO_ENABLED: 1
        run: |
          ROOT="$(pwd)"
          
          # Use the wrapper scripts
          export CC=/tmp/zig-cc
          export CXX=/tmp/zig-c++
          
          # mingw-w64-posix: C++11 for std::mutex, winpthread and winsock2 for Windows - dynamically build library paths and flags
          export CGO_CFLAGS="-I$ROOT/whisper.cpp/include -I$ROOT/whisper.cpp/ggml/include"
          export CGO_CXXFLAGS="-std=c++11"
          
          # Build -L flags for all directories containing .a files
          LDFLAGS="-L$ROOT/whisper.cpp/build_go/src -L$ROOT/whisper.cpp/build_go/ggml/src"
          for backend_dir in "$ROOT/whisper.cpp/build_go/ggml/src"/ggml-*/; do
            [ -d "$backend_dir" ] && LDFLAGS="$LDFLAGS -L$backend_dir"
          done
          
          # Build -l flags for all .a libraries found
          LIBS=""
          for afile in "$ROOT/whisper.cpp/build_go/src"/*.a "$ROOT/whisper.cpp/build_go/ggml/src"/*.a "$ROOT/whisper.cpp/build_go/ggml/src"/ggml-*/*.a; do
            [ -f "$afile" ] && LIBS="$LIBS -l$(basename "$afile" .a | sed 's/^lib//')"
          done
          
          export CGO_LDFLAGS="$LDFLAGS $LIBS -lstdc++ -lgomp -lwinpthread -lws2_32"
          
          chmod +x ./build.sh
          # Skip bindings - use the ones from Linux build
          ./build.sh -platform "windows/amd64" -o "${APP_NAME}-windows-amd64.exe" -ldflags '-linkmode external -extldflags "-static"' -skipbindings

      - name: Upload Windows binary
        uses: actions/upload-artifact@v4
        with:
          name: windows-bin
          path: build/bin/${{ env.APP_NAME }}-windows-amd64.exe

  publish:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0, submodules: false }

      - uses: actions/download-artifact@v4
        with: { name: linux-bin, path: dist }
      - uses: actions/download-artifact@v4
        with: { name: windows-bin, path: dist }

      - uses: fregante/setup-git-user@v2

      - name: Move/refresh "nightly" tag
        run: |
          git fetch --tags
          git tag -fa nightly -m "Nightly $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          git push -f origin nightly

      - name: Update "Nightly" release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly
          target_commitish: ${{ github.sha }}
          name: Nightly
          prerelease: true
          make_latest: true
          files: |
            dist/${{ env.APP_NAME }}-linux-amd64
            dist/${{ env.APP_NAME }}-windows-amd64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
